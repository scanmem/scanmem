# check the dregion command functions as expected
expect_after {
    -re "\[^\n\r\]*$prompt$" { fail "$test (bad match)" }
    timeout { fail "$test (timeout)" }
}

# name the tests
set test "delete regions"
set subtest "default"


scanmem_start

    # try dregion with no arguments
    set subtest "no argument"
    send "dregion\n"
    expect {
        -re "error: expected an argument.*$prompt$" {
            pass "$test ($subtest)" 
        }
    }

    # try using dregion without any pid
    set subtest "no target"
    send "dregion 0\n"
    expect {
        -re "error: no target.*$prompt$" { pass "$test ($subtest)" }
    }

    # start and attach to test process
    smtest_start "--mode=exit"

    # check regions are really deleted
    set subtest "delete specific region"
    send "dregion $smregionid\n"
    expect {
        -re "error:.*$prompt$" { fail "$test ($subtest)" }
        -re "$prompt$" { pass "$test ($subtest)" }
    }

    set subtest "check its gone"
    send "lregions\n"
    expect {
        -re "\\\[\[ \]*$smregionid\\\].*$prompt$" { fail "$test ($subtest)" }
        -re ".*$prompt$" { pass "$test ($subtest)" }
    }
    
    # delete all regions, then try again
    set subtest "no match"
    send "reset\n"
    send "dregion 0\n"
    send "dregion 0\n"
    expect {
        -re "error: no region matching.*$prompt$" { pass "$test ($subtest)" }
    }

    # inverted matches
    set subtest "inverted match"
    send "reset\n"
    send "dregion !0\n"
    send "lregions\n"
    expect {
        -re "\\\[\[ \]*\[^0\]\\\].*$prompt$" { fail "$test ($subtest)" }
        -re "\\\[\[ \]*0\\\].*$prompt$" { pass "$test ($subtest)" }
    }

    # delete the last match
    set subtest "delete all"
    send "dregion 0\n"
    expect {
        -re ".*$prompt$" { pass "$test ($subtest)" }
    }

    # and restore them
    set subtest "regions restored"
    send "reset\n"
    send "lregions\n"
    expect {
        -re "\\\[\[ 0-9\]+\\\].*$prompt$" { pass "$test ($subtest)" }
    }

    # try using unexpected arguments
    set subtest "unexpected arguments"
    send "dregion xyzzy\n"
    expect {
        -re "error: could not parse.*$prompt$" { pass "$test ($subtest)" }
    }

    # try a short list
    # XXX: improve these tests
    set subtest "list"
    send "reset\n"
    send "dregion 0,1\n"
    expect {
        -re "error:.*$prompt$" { fail "$test ($subtest)" }
        -re ".*$prompt$" { pass "$test ($subtest)" }
    }

    # try a list that cant be parsed
    # what about a lone ','
    #set subtest "bad list"
    #send "reset\n"
    #send "dregion !0,4,,abc,995,"

    # all done, terminate the test process.
    smtest_exit

scanmem_exit
